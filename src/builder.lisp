(uiop:define-package #:40ants-doc/builder
  (:use #:cl)
  (:import-from #:alexandria)
  (:import-from #:3bmd)
  (:import-from #:3bmd-code-blocks)
  (:import-from #:named-readtables)
  (:import-from #:pythonic-string-reader)
  (:import-from #:40ants-doc/builder/heading)
  (:import-from #:40ants-doc/builder/footer)
  (:import-from #:40ants-doc/builder/vars)
  (:import-from #:40ants-doc/page)
  (:import-from #:40ants-doc/document)
  (:import-from #:40ants-doc/utils)
  (:import-from #:40ants-doc/builder/printer)
  (:import-from #:40ants-doc
                #:defsection))
(in-package 40ants-doc/builder)

(named-readtables:in-readtable pythonic-string-reader:pythonic-string-syntax)

(defsection @mgl-pax-generating-documentation
    (:title "Generating Documentation")
  "Two convenience functions are provided to serve the common case of
  having an ASDF system with some readmes and a directory with for the
  HTML documentation and the default css stylesheet."
  (update-asdf-system-readmes function)
  (update-asdf-system-html-docs function)
  (*document-html-max-navigation-table-of-contents-level* variable)
  (*document-html-top-blocks-of-links* variable)
  (*document-html-bottom-blocks-of-links* variable)
  (@mgl-pax-github-workflow section)
  (@mgl-pax-world section))


(defparameter *default-output-options*
  '(:if-does-not-exist :create
    :if-exists :supersede
    :ensure-directories-exist t))

(defun update-asdf-system-readmes (sections asdf-system &key (format :markdown))
  "Convenience function to generate readme file in the directory
  holding the ASDF-SYSTEM definition.

  By default, README.md is generated. It has anchors, links, inline code,
  and other markup added. Not necessarily the easiest on the eye in an editor,
  but looks good on github.

  You can provide `:FORMAT :PLAIN` argument to generate README instead.
  It will be optimized for reading in text format. Has no links and
  cluttery markup.

  Example usage:

  ```
  (update-asdf-system-readmes @40ants-doc-manual :40ants-doc)
  ```"
  (ecase format
    (:markdown
     (with-open-file (stream (asdf:system-relative-pathname
                              asdf-system "README.md")
                             :direction :output
                             :if-does-not-exist :create
                             :if-exists :supersede)
       (40ants-doc/document::document sections :stream stream)
       (print-markdown-footer stream)))
    (:plain
     (with-open-file (stream (asdf:system-relative-pathname
                              asdf-system "README")
                             :direction :output
                             :if-does-not-exist :create
                             :if-exists :supersede)
       (loop for section in (alexandria:ensure-list sections) do
                (describe section stream))
       (print-markdown-footer stream)))))


(defun add-markdown-defaults-to-page-specs (sections page-specs dir)
  (flet ((section-has-page-spec-p (section)
           (some (lambda (page-spec)
                   (member section (getf page-spec :objects)))
                 page-specs)))
    (mapcar (lambda (page-spec)
              (add-markdown-defaults-to-page-spec page-spec dir))
            (append page-specs
                    (mapcar (lambda (section)
                              `(:objects (,section)))
                            (remove-if #'section-has-page-spec-p sections))))))

(defun add-markdown-defaults-to-page-spec (page-spec filename)
  `(,@page-spec
    ,@(unless (getf page-spec :output)
        `(:output (,filename ,@*default-output-options*)))
    ,@(unless (getf page-spec :footer-fn)
        `(:footer-fn ,#'print-markdown-footer))))

(defun print-markdown-footer (stream)
  (format stream "~%* * *~%")
  (format stream "###### \\[generated by ~
                 [MGL-PAX](https://github.com/melisgl/mgl-pax)\\]~%"))


(defun update-asdf-system-html-docs (sections asdf-system &key pages
                                     (target-dir (asdf:system-relative-pathname
                                                  asdf-system "doc/"))
                                     (update-css-p t))
  "Generate pretty HTML documentation for a single ASDF system,
  possibly linking to github. If UPDATE-CSS-P, copy the CSS style
  sheet to TARGET-DIR, as well. Example usage:

  ```commonlisp
  (update-asdf-system-html-docs @mgl-pax-manual :mgl-pax)
  ```

  The same, linking to the sources on github:

  ```commonlisp
  (update-asdf-system-html-docs
    @mgl-pax-manual :mgl-pax
    :pages
    `((:objects
      (,mgl-pax:@mgl-pax-manual)
      :source-uri-fn ,(make-github-source-uri-fn
                       :mgl-pax
                       \"https://github.com/melisgl/mgl-pax\"))))
  ```"
  (document-html sections pages target-dir update-css-p nil))

;;; Generate with the default HTML look
(defun document-html (sections page-specs target-dir update-css-p
                      link-to-pax-world-p)
  (when update-css-p
    (copy-css target-dir))
  (let ((pages (add-html-defaults-to-page-specs
                (alexandria:ensure-list sections)
                page-specs target-dir link-to-pax-world-p)))
    (40ants-doc/document::document sections
                                  :pages pages
                                  :format :html)))

(defun add-html-defaults-to-page-specs (sections page-specs dir
                                        link-to-pax-world-p)
  (flet ((section-has-page-spec-p (section)
           (some (lambda (page-spec)
                   (member section (getf page-spec :objects)))
                 page-specs)))
    (mapcar (lambda (page-spec)
              (add-html-defaults-to-page-spec page-spec dir
                                              link-to-pax-world-p))
            (append page-specs
                    (mapcar (lambda (section)
                              `(:objects (,section)))
                            (remove-if #'section-has-page-spec-p sections))))))

(defun add-html-defaults-to-page-spec (page-spec dir link-to-pax-world-p)
  (let* ((objects (getf page-spec :objects))
         (section (if (and (= 1 (length objects))
                           (typep (first objects) '40ants-doc:section))
                      (first objects)
                      nil))
         (title (if section
                    (40ants-doc:section-title section)
                    nil))
         (filename (sections-to-filename objects dir)))
    (flet ((header (stream)
             (html-header stream :title title
                          :stylesheet "style.css" :charset "UTF-8"
                          :link-to-pax-world-p link-to-pax-world-p))
           (footer (stream)
             (html-footer stream)))
      `(,@page-spec
        ,@(unless (getf page-spec :output)
            `(:output (,filename ,@*default-output-options*)))
        ,@(unless (getf page-spec :header-fn)
            `(:header-fn ,#'header))
        ,@(unless (getf page-spec :footer-fn)
            `(:footer-fn ,#'footer))))))

(defun sections-to-filename (sections dir)
  (flet ((name (section)
           (string-downcase
            (remove-special-chars (symbol-name (40ants-doc:section-name section))))))
    (merge-pathnames (format nil "~{~A~^-~}.html"
                             (mapcar #'name sections))
                     dir)))

(defun remove-special-chars (string)
  (remove-if (lambda (char)
               (find char "!@#$%^&*"))
             string))

(defun copy-css (target-dir)
  (ensure-directories-exist target-dir)
  (loop for file in '("js/jquery.min.js" "js/toc.min.js" "css/style.css")
        do (uiop:copy-file (asdf:system-relative-pathname :40ants-doc file)
                           (merge-pathnames (file-namestring file)
                                            target-dir))))

(defvar *document-html-top-blocks-of-links* ()
  "A list of blocks of links to be display on the sidebar on the left,
  above the table of contents. A block is of the form `(&KEY TITLE ID
  LINKS)`, where TITLE will be displayed at the top of the block in a
  HTML `DIV` with `ID`, followed by the links. LINKS is a list
  of `(URI LABEL) elements.`")

(defvar *document-html-bottom-blocks-of-links* ()
  "Like *DOCUMENT-HTML-TOP-BLOCKS-OF-LINKS*, only it is displayed
  below the table of contents.")

(defun html-header
    (stream &key title stylesheet (charset "UTF-8")
     link-to-pax-world-p
     (top-blocks-of-links *document-html-top-blocks-of-links*)
     (bottom-blocks-of-links *document-html-bottom-blocks-of-links*))
  (format
   stream
   """<!DOCTYPE html>~%~
   <html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>~%~
   <head>~%~
   ~@[<title>~A</title>~]~%~
   ~@[<link type='text/css' href='~A' rel='stylesheet'/>~]~%~
   ~@[<meta http-equiv="Content-Type" ~
            content="text/html; ~
   charset=~A"/>~]~%~
   <script src="jquery.min.js"></script>~%~
   <script src="toc.min.js"></script>~%~
   <script type="text/x-mathjax-config">
     MathJax.Hub.Config({
       tex2jax: {
         inlineMath: [['$','$']],
         processEscapes: true
       }
     });
   </script>
   <script type="text/javascript" ~
    src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML">
   </script>
   </head>~%~
   <body>~%~
   <div id="content-container">~%~
     <div id="toc">~%~
       ~A~
       ~:[~;<div id="toc-header"><ul><li><a href="index.html">~
            PAX World</a></li></ul></div>~%~]~
       <div id="page-toc">~%~
       </div>~%~
       ~A~
       <div id="toc-footer">~
         <ul><li><a href="https://github.com/melisgl/mgl-pax">[generated ~
             by MGL-PAX]</a></li></ul>~
       </div>~%~
     </div>~%~
     <div id="content">~%"""
   title stylesheet charset
   (blocks-of-links-to-html-string top-blocks-of-links)
   link-to-pax-world-p
   (blocks-of-links-to-html-string bottom-blocks-of-links)))

(defun blocks-of-links-to-html-string (blocks-of-links)
  (format nil "~{~A~}" (mapcar #'block-of-links-to-html-string
                               blocks-of-links)))

(defun block-of-links-to-html-string (block-of-links)
  (destructuring-bind (&key title id links) block-of-links
    (with-output-to-string (stream)
      (format stream "<div class=\"menu-block\"")
      (when id
        (format stream " id=\"~A\"" id))
      (format stream ">")
      (when title
        (format stream "<span class=\"menu-block-title\">~A</span>" title))
      (format stream "<ul>")
      (dolist (link links)
        (format stream "<li><a href=\"~A\">~A</a></li>"
                (first link)
                (second link)))
      (princ "</ul></div>" stream))))

(defvar *google-analytics-id* nil)

(defun html-footer (stream &key (google-analytics-id *google-analytics-id*))
  (format
   stream
   "  </div>~%~
   </div>~%~
   <script>$('#page-toc').toc(~A);</script>~%~
   ~:[~;<script>
   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){~
   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement~
   (o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.~
   insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/~
   analytics.js','ga');ga('create', '~A', 'auto');ga('send', 'pageview');~
   </script>~%~]</body>~%</html>~%"
   (toc-options)
   google-analytics-id google-analytics-id))

(defvar *document-html-max-navigation-table-of-contents-level* nil
  "NIL or a non-negative integer. If non-NIL, it overrides
  *DOCUMENT-MAX-NUMBERING-LEVEL* in dynamic HTML table of contents on
  the left of the page.")

(defun toc-options ()
  (let ((max-level (or 40ants-doc/builder::*document-html-max-navigation-table-of-contents-level*
                       40ants-doc/builder/vars::*document-max-table-of-contents-level*)))
    (format nil "{'selectors': '~{~A~^,~}'}"
            (loop for i upfrom 1 upto (1+ max-level)
                  collect (format nil "h~S" i)))))


(defmethod 40ants-doc/document::document (object &key stream pages (format :markdown))
  """Write OBJECT in FORMAT to STREAM diverting some output to PAGES.
  FORMAT can be anything [3BMD][3bmd] supports which is
  currently :MARKDOWN, :HTML and :PLAIN. STREAM may be a stream
  object, T or NIL as with CL:FORMAT.

  Most often, this function is called on section objects
  like `(DOCUMENT @MGL-PAX-MANUAL)`, but it supports all kinds of
  objects for which DOCUMENT-OBJECT is defined. To look up the
  documentation of function DOCUMENT:

      (document #'document)

  To generate the documentation for separate libraries with automatic
  cross-links:

      (document (list @cube-manual @mat-manual))

  Note that not only first class objects can have documentation. For
  instance, variables and deftypes are not represented by objects.
  That's why CL:DOCUMENTATION has a DOC-TYPE argument. DOCUMENT does
  not have anything like that, instead it relies on REFERENCE objects
  to carry the extra information. We are going to see later how
  references and locatives work. Until then, here is an example on how
  to look up the documentation of type `FOO`:

      (document (locate 'foo 'type))

  One can call DESCRIBE on [SECTION][class] objects to get
  documentation in markdown format with less markup than the default.
  See DESCRIBE-OBJECT `(METHOD () (SECTION T))`.

  There are quite a few special variables that affect how output is
  generated, see @MGL-PAX-DOCUMENTATION-PRINTER-VARIABLES.

  The rest of this description deals with how to generate multiple
  pages.

  The PAGES argument is to create multi-page documents by routing some
  of the generated output to files, strings or streams. PAGES is a
  list of page specification elements. A page spec is a plist with
  keys :OBJECTS, :OUTPUT, :URI-FRAGMENT, :SOURCE-URI-FN, :HEADER-FN
  and :FOOTER-FN. OBJECTS is a list of objects (references are allowed
  but not required) whose documentation is to be sent to `OUTPUT`.

  When documentation for an object is generated, the first matching
  page spec is used, where the object matches the page spec if it is
  contained in one of its :OBJECTS in the sense of
  COLLECT-REACHABLE-OBJECTS.

  `OUTPUT` can be a number things:

  - If it's a list whose first element is a string or a pathname, then
    output will be sent to the file denoted by that and the rest of
    the elements of the list are passed on as arguments to CL:OPEN.
    One extra keyword argument is :ENSURE-DIRECTORIES-EXIST. If it's
    true, ENSURE-DIRECTORIES-EXIST will be called on the pathname
    before it's opened.

  - If it's NIL, then output will be collected in a string.

  - If it's T, then output will be sent to *STANDARD-OUTPUT*.

  - If it's a stream, then output will be sent to that stream.

  If some pages are specified, DOCUMENT returns a list of designators
  for generated output. If a page whose `OUTPUT` refers to a file that
  was created (which doesn't happen if nothing would be written to
  it), then the corresponding pathname is included in the list. For
  strings the string itself, while for streams the stream object is
  included in the list. This way it's possible to write some pages to
  files and some to strings and have the return value indicate what
  was created. The output designators in the returned list are ordered
  by creation time.

  If no PAGES are specified, DOCUMENT returns a single pathname,
  string or stream object according to the value of the STREAM
  argument.

  Note that even if PAGES is specified, STREAM acts as a catch all
  taking the generated documentation for references not claimed by any
  pages. Also, the filename, string or stream corresponding to STREAM
  is always the first element in list of generated things that is the
  return value.

  HEADER-FN, if not NIL, is a function of a single stream argument
  which is called just before the first write to the page.
  Since :FORMAT :HTML only generates HTML fragments, this makes it
  possible to print arbitrary headers, typically setting the title,
  css stylesheet, or charset.

  FOOTER-FN is similar to HEADER-FN, but it's called after the last
  write to the page. For HTML, it typically just closes the body.

  URI-FRAGMENT is a string such as `"doc/manual.html"` that specifies
  where the page will be deployed on a webserver. It defines how links
  between pages will look. If it's not specified and `OUTPUT` refers
  to a file, then it defaults to the name of the file. If URI-FRAGMENT
  is NIL, then no links will be made to or from that page.

  Finally, SOURCE-URI-FN is a function of a single, REFERENCE
  argument. If it returns a value other than NIL, then it must be a
  string representing an URI. If FORMAT is :HTML and
  *DOCUMENT-MARK-UP-SIGNATURES* is true, then the locative as
  displayed in the signature will be a link to this uri. See
  MAKE-GITHUB-SOURCE-URI-FN.

  PAGES may look something like this:

  ```commonlisp
  `((;; The section about SECTIONs and everything below it ...
     :objects (, @mgl-pax-sections)
     ;; ... is so boring that it's not worth the disk space, so
     ;; send it to a string.
     :output (nil)
     ;; Explicitly tell other pages not to link to these guys.
     :uri-fragment nil)
    ;; Send the @MGL-PAX-EXTENSION-API section and everything reachable
    ;; from it ...
    (:objects (, @mgl-pax-extension-api)
     ;; ... to build/tmp/pax-extension-api.html.
     :output ("build/tmp/pax-extension-api.html")
     ;; However, on the web server html files will be at this
     ;; location relative to some common root, so override the
     ;; default:
     :uri-fragment "doc/dev/pax-extension-api.html"
     ;; Set html page title, stylesheet, charset.
     :header-fn 'write-html-header
     ;; Just close the body.
     :footer-fn 'write-html-footer)
    ;; Catch the reference that were not reachable from the above. It
    ;; is important for this page spec to be last.
    (:objects (, @mgl-pax-manual)
     :output ("build/tmp/manual.html")
     ;; Links from the extension api page to the manual page will
     ;; be to ../user/pax-manual#<anchor>, while links going to
     ;; the opposite direction will be to
     ;; ../dev/pax-extension-api.html#<anchor>.
     :uri-fragment "doc/user/pax-manual.html"
     :header-fn 'write-html-header
     :footer-fn 'write-html-footer))
  ```"""
  (let ((40ants-doc/builder/printer::*format* format)
        (*print-right-margin* (or *print-right-margin* 80))
        (*package* (if 40ants-doc/builder/printer::*document-normalize-packages*
                       (find-package :keyword)
                       *package*))
        (default-page (40ants-doc/page::translate-page-spec
                       (list :objects (alexandria:ensure-list object)
                             :output (list stream))
                       format))
        (3bmd-code-blocks:*code-blocks* t)
        (3bmd-code-blocks:*code-blocks-default-colorize* :common-lisp)
        (3bmd-code-blocks::*colorize-name-map*
          (alexandria:plist-hash-table
           `("cl-transcript" :common-lisp
                             ,@(alexandria:hash-table-plist
                                3bmd-code-blocks::*colorize-name-map*))
           :test #'equal)))
    (40ants-doc/page::with-tracking-pages-created ()
      (40ants-doc/page::with-pages ((append (40ants-doc/page::translate-page-specs pages format)
                                            (list default-page)))
        (40ants-doc/page::with-temp-output-to-page (stream default-page)
          (dolist (object (alexandria:ensure-list object))
            (40ants-doc/builder/heading::with-headings (object)
              (40ants-doc/document::document-object object stream))))
        (let ((outputs ()))
          (40ants-doc/page::do-pages-created (page)
            (40ants-doc/page::with-temp-output-to-page (stream page)
              (40ants-doc/builder/footer::emit-footer stream))
            (unless (eq format :markdown)
              (let ((markdown-string (40ants-doc/page::with-temp-input-from-page (stream page)
                                       (40ants-doc/utils::read-stream-into-string stream))))
                (40ants-doc/utils::delete-stream-spec (40ants-doc/page::page-temp-stream-spec page))
                (40ants-doc/page::with-final-output-to-page (stream page)
                  (when (40ants-doc/page::page-header-fn page)
                    (funcall (40ants-doc/page::page-header-fn page) stream))
                  (3bmd:parse-string-and-print-to-stream markdown-string
                                                         stream :format format)
                  (when (40ants-doc/page::page-footer-fn page)
                    (funcall (40ants-doc/page::page-footer-fn page) stream)))))
            (push (40ants-doc/utils::unmake-stream-spec (40ants-doc/page::page-final-stream-spec page)) outputs))
          (if (and stream (endp pages))
              (first outputs)
              (reverse outputs)))))))


